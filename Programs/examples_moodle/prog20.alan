-- this program :
-- reads the number of N entries to create the list from the first line of the input.
-- reads from each of the following N lines of the input two positive natural numbers K and X
-- and enter the X number in the K-position of the list. 
-- Assume that K will be always smaller than or equal to the current size of the list plus one.
-- Reads from the N + 2 line of the input the number of M searches
-- Reads from each of the following M input lines a positive physical number X 
-- and searches for X in the searchMF list.
-- Prints a number corresponding to the sum of the values ​​returned by the searchMF for all searches.


program() : proc

	convertInput(result: reference int[], line: reference byte[], size: int) : proc
	i: int;
	j: int;
	prev: byte;
	{
		i =0;
		j =0;
		prev = ' ';
		while(i < size & line[i]!='\n'){

			if(prev!= ' '){ 
				if(line[i]!= ' ' )
					result[j-1] = result[j-1]*10 + extend(line[i]) -48;
				else
					prev = ' ';
			}
			else{
				if(line[i] != ' ' ){
					result[j] = extend(line[i]) -48;
					j = j+1;
					prev = line[i];
				}
				else
					prev = ' ';
			}

			i = i+1;
		}
	}

	delFromList(array: reference int[],del_i: int, size_arr: reference int, max_i: reference int) : proc
	i: int;
	{
		array[del_i] =0;
		size_arr = size_arr -1;
		i = del_i;
		while(i<max_i){
			array[i] = array[i+1];
			i=i+1;
		}
		array[max_i] = 0;
		max_i = max_i -1;
	}

	addToList(array: reference int[], enter: reference int[], size_arr: reference int, max_i: reference int) : proc
	i: int;
	{
		if(array[enter[0]]==0){ -- is empty position
			array[enter[0]] = enter[1];
			size_arr = size_arr +1;
			if(max_i<enter[1])
				max_i = enter[1];
		}
		else{
			i = max_i +1;
			while(i >= enter[0]+1){
				array[i] = array[i-1];
				i = i-1;
			}
			array[enter[0]] = enter[1];
			size_arr = size_arr +1;
			max_i = max_i +1;
		}

	}

	searchList(array: reference int[], search: int, size: int) : int
	i: int;
	{
		i =0;
		while(i<=size){
			if(array[i] == search){
				return i;
			}
			i = i+1;
		}
		return 0;
	}
	

N:int;
i: int;
j: int;
search: int;
line: byte[20];
enter: int[3];
array: int[100];
max_i: int;
size_arr: int;
sum: int;
{
	writeString("Give me the number of imports: ");
	N = readInteger();
	i =0;
	max_i = 0;
	size_arr=0;
	while(i< N){
		readString(20,line);
		convertInput(enter,line,strlen(line));
		
		-- enter data 
		addToList(array,enter,size_arr,max_i);
		
		i = i+1;
	}

	writeString("Give me the number of searches : ");
	N = readInteger();
	i =0;
	sum =0;
	while(i< N){
		search = readInteger();
		--search data
		j = searchList(array,search, max_i);
		sum = sum +j;
		-- delete data
		delFromList(array,j,size_arr,max_i);
		-- enter data 
		enter[0] = 1;
		enter[1] = search;
		addToList(array,enter,size_arr,max_i);
		
		i = i+1;
	}

	writeInteger(sum);
	writeChar('\n');
	
}