define i32 @foo(i32 %x) {      ; X BY VALUE
entry1:
  %x.1 = alloca i32
  store i32 %x, i32* %x.1  ; copy the arg value to a new memory location
  %0 = load i32, i32* %x.1   ; every time you want to access it, load it to a new tmp reg
  %1 = add nuw nsw i32 %0, 1  ; use the tmp register for evaluations
  store i32 %1, i32* %x.1    ; save the new value back to the same adress space
  %2 = load i32, i32* %x.1
  %3 = mul nuw nsw i32 %2, 2  ; TO CHANGE VALUE: READ LOCAL MEM, PERFORM THE CALCULATION
  store i32 %3, i32* %x.1     ; ON TMP REG, COPY BACK TO TO LOCAL MEM
  %4 = load i32, i32* %x.1
  ret i32 %4
}
define i32 @goo(i32* %x) {      ; X BY REFERENCE
entry2:                     -- takes a pointer to x
  %x.1 = alloca i32*
  store i32* %x, i32** %x.1   -- saves to local mem THE ADDRESS of x
  %0 = load i32*, i32** %x.1
  %1 = load i32, i32* %0
  %2 = add nuw nsw i32 %1, 1  -- to acess: perform double load local ptr -> global ptr -> value
  store i32 %2, i32* %0     -- store directly to the global ptr
  %3 = load i32, i32* %0
  %4 = mul nuw nsw i32 %3, 3
  store i32 %4, i32* %0        --NOTE: SEQUENTIAL ACCESSES ALL USE THE SAME
  %5 = load i32, i32* %0       -- GLOBAL POINTER %0
  ret i32 %5
}



  %3 = load i32, i32* %0
  ret i32 %3
}
